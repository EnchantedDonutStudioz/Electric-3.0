/* tslint:disable */
/* eslint-disable */
/**
*/
export class EpoxyClient {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
/**
* @param {any} wisp_url
* @param {EpoxyClientOptions} options
*/
  constructor(wisp_url: any, options: EpoxyClientOptions);
/**
* @returns {Promise<void>}
*/
  replace_stream_provider(): Promise<void>;
/**
* @param {string} url
* @param {object} options
* @returns {Promise<Response>}
*/
  fetch(url: string, options: object): Promise<Response>;
/**
*/
  redirect_limit: number;
/**
*/
  user_agent: string;
}
/**
*/
export class EpoxyClientOptions {
  free(): void;
/**
*/
  constructor();
/**
*/
  disable_certificate_validation: boolean;
/**
*/
  redirect_limit: number;
/**
*/
  title_case_headers: boolean;
/**
*/
  udp_extension_required: boolean;
/**
*/
  user_agent: string;
/**
*/
  websocket_protocols: (string)[];
/**
*/
  wisp_v2: boolean;
}
/**
*/
export class EpoxyHandlers {
  free(): void;
/**
*/
  onclose: Function;
/**
*/
  onerror: Function;
/**
*/
  onmessage: Function;
/**
*/
  onopen: Function;
}
/**
*/
export class IntoUnderlyingByteSource {
  free(): void;
/**
* @param {ReadableByteStreamController} controller
*/
  start(controller: ReadableByteStreamController): void;
/**
* @param {ReadableByteStreamController} controller
* @returns {Promise<any>}
*/
  pull(controller: ReadableByteStreamController): Promise<any>;
/**
*/
  cancel(): void;
/**
*/
  readonly autoAllocateChunkSize: number;
/**
*/
  readonly type: string;
}
/**
*/
export class IntoUnderlyingSink {
  free(): void;
/**
* @param {any} chunk
* @returns {Promise<any>}
*/
  write(chunk: any): Promise<any>;
/**
* @returns {Promise<any>}
*/
  close(): Promise<any>;
/**
* @param {any} reason
* @returns {Promise<any>}
*/
  abort(reason: any): Promise<any>;
}
/**
*/
export class IntoUnderlyingSource {
  free(): void;
/**
* @param {ReadableStreamDefaultController} controller
* @returns {Promise<any>}
*/
  pull(controller: ReadableStreamDefaultController): Promise<any>;
/**
*/
  cancel(): void;
}

export type InitInput = RequestInfo | URL | Response | BufferSource | WebAssembly.Module;

/**
*
* @param {{ module_or_path: InitInput | Promise<InitInput> }} module_or_path 
*
* @returns {Promise<void>}
*/
export default function __wbg_init (module_or_path?: { module_or_path: InitInput | Promise<InitInput> } | InitInput | Promise<InitInput>): Promise<void>;
export const info: { version: string, minimal: boolean, release: boolean };
